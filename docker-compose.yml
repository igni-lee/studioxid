version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: protopie-postgres
    environment:
      POSTGRES_DB: protopie_assignment
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - protopie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: protopie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - protopie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # RabbitMQ 메시지 큐
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: protopie-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - protopie-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot 애플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: protopie-app
    environment:
      # 데이터베이스 설정
      DB_USERNAME: postgres
      DB_PASSWORD: password
      SPRING_DATASOURCE_WRITER_URL: jdbc:postgresql://postgres:5432/protopie_assignment
      SPRING_DATASOURCE_READER_URL: jdbc:postgresql://postgres:5432/protopie_assignment
      
      # Redis 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # RabbitMQ 설정
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
      
      # JWT 설정
      JWT_SECRET: mySecretKey12345678901234567890123456789012345678901234567890
      JWT_EXPIRATION: 86400000
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - protopie-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  protopie-network:
    driver: bridge

